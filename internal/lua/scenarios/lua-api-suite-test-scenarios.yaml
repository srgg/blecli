test_cases:
# GOAL: Verify that inline scripts work and the arg [] table is initialized
#
# TEST SCENARIO: Execute an inline Lua script → verify the arg table is available
  - name: "Inline Script with arg[] table"
    script: |
      -- Verify arg table is initialized even without URL params
      assert(type(arg) == "table", "arg should be a table")
      print("Script executed successfully")
    wait_after: 100ms
    expected_stdout: |
      Script executed successfully

# GOAL: Verify that URL query parameters are passed to Lua via arg[] table
#
# TEST SCENARIO: Load script with URL params → verify arg[] contains params
  - name: "URL Parameters in arg[] table"
    script: "file://internal/lua/scenarios/test_arg_url_params.lua?format=json&verbose=true"
    wait_after: 100ms
    expected_stdout: |
      arg["format"] = "json"
      arg["verbose"] = "true"

# GOAL: Verify that error validation shows expected vs actual when errors are expected but none are found
#
# TEST SCENARIO: Execute script with no errors → expect errors → verify error message shows expected errors list
  - name: "Shows expected errors when none found"
    script: 'print("Hello World")'
    expected_errors:
      - "expected error 1"
      - "expected error 2"
    skip: "Cannot programmatically validate error message format - Go testify/suite framework doesn't expose subtest failure messages. This test demonstrates the error message but must be manually verified."
