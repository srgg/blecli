test_cases:
# GOAL: Verify that error conditions are properly detected and reported with meaningful error messages
#
# TEST SCENARIO: Execute various invalid subscription configurations → expect specific error messages
# NOTE: "Missing Callback" test is in Go code (bleapi_subscription_test.go)
#       because the YAML framework always generates callbacks and cannot test this Lua syntax error

  - name: "Error Handling: Callback Runtime Error"
    # GOAL: Verify that Lua subscription callback runtime errors are correctly captured
    #
    # TEST SCENARIO: Callback throws Lua error → error logged and sent to stderr → callback execution stops but subscription continues
    subscription:
      mode: EveryUpdate
      max_rate: 0ms
      services:
        - service: "1234"
          characteristics: ["5678"]
      callback_script: |

                error("Intentional test error in Lua callback")
    steps:
      - services:
          - service: "1234"
            values:
              - char: "5678"
                value: [0x01, 0x02]
    expected_json_output:
      - call_count: 0
        errors:
          - message: "Callback error: [string \"...\"]:10: Intentional test error in Lua callback"
            source: "callback"
        record: {}

  - name: "Error Handling: Missing Services"
    subscription:
      mode: EveryUpdate
      max_rate: 0ms
      services: []
    expect_error_message: "no services specified in Lua subscription"

  - name: "Error Handling: Non-existent Service"
    subscription:
      mode: EveryUpdate
      max_rate: 0ms
      services:
        - service: "non-existent-service"
          characteristics: ["non-existent-char"]
    expect_error_message: "missing services: non-existent-service"

  - name: "Error Handling: Non-existent Characteristic"
    subscription:
      mode: EveryUpdate
      max_rate: 0ms
      services:
        - service: "180d"
          characteristics: ["non-existent-char", "2a37"]
    expect_error_message: "missing characteristics: non-existent-char"

# GOAL: Verify that EveryUpdate mode delivers each BLE notification immediately
#       as a separate callback with a single value per characteristic
#
# TEST SCENARIO: Send four notifications to the same characteristic → receive four separate callbacks → verify each contains the correct value
  - name: "EveryUpdate Subscription Test"
    subscription:
      mode: EveryUpdate
      services:
        - service: "1234"
          characteristics: ["5678"]
    allow_multi_value: true
    steps:
      - services:
          - service: "1234"
            values:
              - char: "5678"
                value: [0x58, 0x59, 0x5A]
              - char: "5678"
                value: [0x01, 0x02, 0x03]
              - char: "5678"
                value: [0x00, 0x5A]
              - char: "5678"
                value: [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]
    expected_json_output:
      - record:
          Values:
            "5678": [0x58, 0x59, 0x5A]
      - record:
          Values:
            "5678": [0x01, 0x02, 0x03]
      - record:
          Values:
            "5678": [0x00, 0x5A]
      - record:
          Values:
            "5678": [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]

# GOAL: Verify that Aggregated mode delivers only the latest value per characteristic
#       at ticker intervals (max_rate), discarding intermediate updates
#
# TEST SCENARIO: Send 2 values per step with 300ms ticker → receive only the latest value per tick → verify correct aggregation
  - name: "Aggregation Subscription Test"
    wait_after: 500ms
    subscription:
      mode: "Aggregated"
      max_rate: 300ms
      services:
        - service: "1234"
          characteristics: ["5678"]
    steps:
      - services:
          - service: "1234"
            values:
              - char: "5678"
                value: [0x58, 0x59, 0x5A]
              - char: "5678"
                value: [0x01, 0x02, 0x03]
        expected_json_output:
          - call_count: 1
            record:
              Values:
                "5678": [0x01, 0x02, 0x03]
      - services:
          - service: "1234"
            values:
              - char: "5678"
                value: [0x00, 0x5A]
              - char: "5678"
                value: [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]
        expected_json_output:
          - call_count: 2
            record:
              Values:
                "5678": [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]

# GOAL: Verify that Batched mode collects all values per characteristic between
#       ticker intervals and delivers them as arrays in a single callback
#
# TEST SCENARIO: Send 2 values per step with 300ms ticker → receive batched arrays of all values per tick → verify complete batching
  - name: "Batched Subscription Test"
    wait_after: 500ms
    subscription:
      mode: "Batched"
      max_rate: 300ms
      services:
        - service: "1234"
          characteristics: ["5678"]
    allow_multi_value: true
    steps:
      - services:
          - service: "1234"
            values:
              - char: "5678"
                value: [0x58, 0x59, 0x5A]
              - char: "5678"
                value: [0x01, 0x02, 0x03]
        expected_json_output:
          - call_count: 1
            record:
              BatchValues:
                "5678":
                  - [0x58, 0x59, 0x5A]
                  - [0x01, 0x02, 0x03]
      - services:
          - service: "1234"
            values:
              - char: "5678"
                value: [0x00, 0x5A]
              - char: "5678"
                value: [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]
        expected_json_output:
          - call_count: 2
            record:
              BatchValues:
                "5678":
                  - [0x00, 0x5A]
                  - [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]

# GOAL: Verify that EveryUpdate mode correctly handles subscriptions to multiple
#       characteristics and delivers separate notifications for each
#
# TEST SCENARIO: Subscribe to 2 characteristics → send value to each → receive two separate callbacks with correct characteristic data
  - name: "EveryUpdate Multi-Characteristic Subscription Test"
    subscription:
      mode: EveryUpdate
      services:
        - service: "180D"
          characteristics: ["2A37", "2A38"]
    steps:
      - services:
          - service: "180D"
            values:
              - char: "2A37"
                value: [0x58, 0x59, 0x5A]
              - char: "2A38"
                value: [0x01, 0x02, 0x03]
        expected_json_output:
          - call_count: 1
            record:
              Values:
                "2a37": [0x58, 0x59, 0x5A]
          - call_count: 2
            record:
              Values:
                "2a38": [0x01, 0x02, 0x03]

# GOAL: Verify that inspect.lua produces the expected text output format
#
# TEST SCENARIO: Execute inspect.lua script → verify text format output matches an expected format
  - name: "Inspect Device Test"
    script: "file://examples/inspect.lua"
    wait_after: 500ms
    peripheral:
      - service: "1234"
        characteristics: ["5678"]
      - service: "180d"
        characteristics: ["2a37", "2a38"]
      - service: "180f"
        characteristics: ["2a19"]
    expected_stdout: |
      Device info:
        ID: 00:00:00:00:00:01
        Address: 00:00:00:00:00:01
        Name: 00:00:00:00:00:01
        RSSI: 0
        Connectable: false
        Advertised Services: none
        Manufacturer Data: none
        Service Data: none
        GATT Services: 3

      [1] Service: 0x1234
        [1.1] Characteristic: 0x5678 (props: 0x12)

      [2] Service: 0x180d
        [2.1] Characteristic: 0x2a37 (props: 0x12)
        [2.2] Characteristic: 0x2a38 (props: 0x12)

      [3] Service: 0x180f
        [3.1] Characteristic: 0x2a19 (props: 0x12)

# GOAL: Verify that inspect.lua produce expected JSON output format
#
# TEST SCENARIO: Execute inspect.lua with ?format=json → verify JSON structure via expected_output
  - name: "Inspect Device Test (JSON format)"
    script: "file://examples/inspect.lua?format=json"
    wait_after: 500ms
    peripheral:
      - service: "1234"
        characteristics: ["5678"]
      - service: "180d"
        characteristics: ["2a37", "2a38"]
      - service: "180f"
        characteristics: ["2a19"]
    expected_json_output:
      - device:
          id: "00:00:00:00:00:01"
          address: "00:00:00:00:00:01"
          name: "00:00:00:00:00:01"
          rssi: 0
          connectable: false
          advertised_services: []
          manufacturer_data: ""
          service_data: []
        services:
          - uuid: "1234"
            characteristics:
              - uuid: "5678"
                properties:
                  read: true
                  write: false
                  notify: true
                  indicate: false
                descriptors: []
          - uuid: "180d"
            characteristics:
              - uuid: "2a37"
                properties:
                  read: true
                  write: false
                  notify: true
                  indicate: false
                descriptors: []
              - uuid: "2a38"
                properties:
                  read: true
                  write: false
                  notify: true
                  indicate: false
                descriptors: []
          - uuid: "180f"
            characteristics:
              - uuid: "2a19"
                properties:
                  read: true
                  write: false
                  notify: true
                  indicate: false
                descriptors: []


