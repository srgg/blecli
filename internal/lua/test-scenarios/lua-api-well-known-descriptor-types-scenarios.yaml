test_cases:
# GOAL: Verify that well-known BLE descriptor values and parsed values are correctly exposed in Lua API
#
# TEST SCENARIO: Create characteristics with various standard BLE descriptor types → verify raw values and parsed structures

  - name: "CCCD: Notifications Enabled"
    # GOAL: Verify CCCD with notifications enabled is correctly parsed
    #
    # TEST SCENARIO: CCCD with value 0x0100 (notifications=true, indications=false) → verify parsed_value structure
    script: |
      local char = blim.characteristic("180d", "2a37")
      local desc = char.descriptors[1]
      if not desc then
        error("Expected descriptor to exist")
      end
      if desc.uuid ~= "2902" then
        error("Expected CCCD (0x2902), got: " .. desc.uuid)
      end
      if desc.name ~= "Client Characteristic Configuration" then
        error("Expected CCCD name, got: " .. (desc.name or "nil"))
      end
      if desc.value ~= "0100" then
        error("Expected value 0100, got: " .. (desc.value or "nil"))
      end
      if not desc.parsed_value then
        error("Expected parsed_value table")
      end
      if desc.parsed_value.notifications ~= true then
        error("Expected notifications=true")
      end
      if desc.parsed_value.indications ~= false then
        error("Expected indications=false")
      end
      print("CCCD notifications test passed")
    peripheral:
      - service: "180d"
        characteristics:
          - uuid: "2a37"
            descriptors:
              - uuid: "2902"
                value: [0x01, 0x00]  # Notifications enabled
    expected_stdout: |
      CCCD notifications test passed

  - name: "CCCD: Indications Enabled"
    # GOAL: Verify CCCD with indications enabled is correctly parsed
    #
    # TEST SCENARIO: CCCD with value 0x0200 (notifications=false, indications=true) → verify parsed_value structure
    script: |
      local char = blim.characteristic("180d", "2a37")
      local desc = char.descriptors[1]
      if not desc then
        error("Expected descriptor to exist")
      end
      if desc.value ~= "0200" then
        error("Expected value 0200, got: " .. (desc.value or "nil"))
      end
      if desc.parsed_value.notifications ~= false then
        error("Expected notifications=false")
      end
      if desc.parsed_value.indications ~= true then
        error("Expected indications=true")
      end
      print("CCCD indications test passed")
    peripheral:
      - service: "180d"
        characteristics:
          - uuid: "2a37"
            descriptors:
              - uuid: "2902"
                value: [0x02, 0x00]  # Indications enabled
    expected_stdout: |
      CCCD indications test passed

  - name: "CCCD: Both Notifications and Indications Enabled"
    # GOAL: Verify CCCD with both notifications and indications enabled
    #
    # TEST SCENARIO: CCCD with value 0x0300 → verify both flags are true
    script: |
      local char = blim.characteristic("180d", "2a37")
      local desc = char.descriptors[1]
      if not desc then
        error("Expected descriptor to exist")
      end
      if desc.value ~= "0300" then
        error("Expected value 0300, got: " .. (desc.value or "nil"))
      end
      if desc.parsed_value.notifications ~= true then
        error("Expected notifications=true")
      end
      if desc.parsed_value.indications ~= true then
        error("Expected indications=true")
      end
      print("CCCD both enabled test passed")
    peripheral:
      - service: "180d"
        characteristics:
          - uuid: "2a37"
            descriptors:
              - uuid: "2902"
                value: [0x03, 0x00]  # Both enabled
    expected_stdout: |
      CCCD both enabled test passed

  - name: "User Description: ASCII String"
    # GOAL: Verify User Description descriptor is correctly parsed as UTF-8 string
    #
    # TEST SCENARIO: User Description with "Hello" → verify parsed_value is string
    script: |
      local char = blim.characteristic("1234", "5678")
      local desc = char.descriptors[1]
      if not desc then
        error("Expected descriptor to exist")
      end
      if desc.uuid ~= "2901" then
        error("Expected User Description (0x2901), got: " .. desc.uuid)
      end
      if desc.name ~= "Characteristic User Descriptor" then
        error("Expected User Description name")
      end
      if desc.value ~= "48656C6C6F" then
        error("Expected value 48656C6C6F (Hello), got: " .. (desc.value or "nil"))
      end
      if desc.parsed_value ~= "Hello" then
        error("Expected parsed_value='Hello', got: " .. (desc.parsed_value or "nil"))
      end
      print("User Description test passed")
    peripheral:
      - service: "1234"
        characteristics:
          - uuid: "5678"
            descriptors:
              - uuid: "2901"
                value: [0x48, 0x65, 0x6C, 0x6C, 0x6F]  # "Hello" in ASCII
    expected_stdout: |
      User Description test passed

  - name: "Extended Properties: Reliable Write and Writable Auxiliaries"
    # GOAL: Verify Extended Properties descriptor is correctly parsed
    #
    # TEST SCENARIO: Extended Properties with reliable_write + writable_auxiliaries → verify boolean flags
    script: |
      local char = blim.characteristic("1234", "5678")
      local desc = char.descriptors[1]
      if not desc then
        error("Expected descriptor to exist")
      end
      if desc.uuid ~= "2900" then
        error("Expected Extended Properties (0x2900), got: " .. desc.uuid)
      end
      if desc.name ~= "Characteristic Extended Properties" then
        error("Expected Extended Properties name")
      end
      if desc.value ~= "0300" then
        error("Expected value 0300, got: " .. (desc.value or "nil"))
      end
      if not desc.parsed_value then
        error("Expected parsed_value table")
      end
      if desc.parsed_value.reliable_write ~= true then
        error("Expected reliable_write=true")
      end
      if desc.parsed_value.writable_auxiliaries ~= true then
        error("Expected writable_auxiliaries=true")
      end
      print("Extended Properties test passed")
    peripheral:
      - service: "1234"
        characteristics:
          - uuid: "5678"
            descriptors:
              - uuid: "2900"
                value: [0x03, 0x00]  # Reliable Write + Writable Auxiliaries
    expected_stdout: |
      Extended Properties test passed

  - name: "Presentation Format: Battery Level Percentage"
    # GOAL: Verify Presentation Format descriptor is correctly parsed
    #
    # TEST SCENARIO: Presentation Format for battery percentage → verify all fields
    script: |
      local char = blim.characteristic("180f", "2a19")
      local desc = char.descriptors[1]
      if not desc then
        error("Expected descriptor to exist")
      end
      if desc.uuid ~= "2904" then
        error("Expected Presentation Format (0x2904), got: " .. desc.uuid)
      end
      if not desc.parsed_value then
        error("Expected parsed_value table")
      end
      if desc.parsed_value.format ~= 4 then
        error("Expected format=4 (uint8), got: " .. tostring(desc.parsed_value.format))
      end
      if desc.parsed_value.exponent ~= 0 then
        error("Expected exponent=0, got: " .. tostring(desc.parsed_value.exponent))
      end
      if desc.parsed_value.unit ~= 10497 then
        error("Expected unit=10497 (percentage 0x2901), got: " .. tostring(desc.parsed_value.unit))
      end
      if desc.parsed_value.namespace ~= 1 then
        error("Expected namespace=1 (Bluetooth SIG), got: " .. tostring(desc.parsed_value.namespace))
      end
      print("Presentation Format test passed")
    peripheral:
      - service: "180f"
        characteristics:
          - uuid: "2a19"
            descriptors:
              - uuid: "2904"
                value: [0x04, 0x00, 0x01, 0x29, 0x01, 0x00, 0x00]  # uint8, exponent=0, unit=0x2901 (percentage)
    expected_stdout: |
      Presentation Format test passed

  - name: "Server Config: Broadcasts Enabled"
    # GOAL: Verify Server Characteristic Configuration descriptor is correctly parsed
    #
    # TEST SCENARIO: Server Config with broadcasts enabled → verify boolean flag
    script: |
      local char = blim.characteristic("1234", "5678")
      local desc = char.descriptors[1]
      if not desc then
        error("Expected descriptor to exist")
      end
      if desc.uuid ~= "2903" then
        error("Expected Server Config (0x2903), got: " .. desc.uuid)
      end
      if desc.value ~= "0100" then
        error("Expected value 0100, got: " .. (desc.value or "nil"))
      end
      if not desc.parsed_value then
        error("Expected parsed_value table")
      end
      if desc.parsed_value.broadcasts ~= true then
        error("Expected broadcasts=true")
      end
      print("Server Config test passed")
    peripheral:
      - service: "1234"
        characteristics:
          - uuid: "5678"
            descriptors:
              - uuid: "2903"
                value: [0x01, 0x00]  # Broadcasts enabled
    expected_stdout: |
      Server Config test passed

  - name: "Valid Range: Min and Max Values"
    # GOAL: Verify Valid Range descriptor is correctly parsed
    #
    # TEST SCENARIO: Valid Range with min=0x0000, max=0x00FF → verify hex strings
    script: |
      local char = blim.characteristic("1234", "5678")
      local desc = char.descriptors[1]
      if not desc then
        error("Expected descriptor to exist")
      end
      if desc.uuid ~= "2906" then
        error("Expected Valid Range (0x2906), got: " .. desc.uuid)
      end
      if not desc.parsed_value then
        error("Expected parsed_value table")
      end
      if desc.parsed_value.min ~= "0000" then
        error("Expected min=0000, got: " .. (desc.parsed_value.min or "nil"))
      end
      if desc.parsed_value.max ~= "00FF" then
        error("Expected max=00FF, got: " .. (desc.parsed_value.max or "nil"))
      end
      print("Valid Range test passed")
    peripheral:
      - service: "1234"
        characteristics:
          - uuid: "5678"
            descriptors:
              - uuid: "2906"
                value: [0x00, 0x00, 0x00, 0xFF]  # min=0x0000, max=0x00FF
    expected_stdout: |
      Valid Range test passed

  - name: "Unknown Descriptor: Custom UUID Returns Raw Bytes"
    # GOAL: Verify unknown descriptor UUIDs return raw byte values
    #
    # TEST SCENARIO: Custom descriptor UUID → verify value is hex string, parsed_value is also hex string
    script: |
      local char = blim.characteristic("1234", "5678")
      local desc = char.descriptors[1]
      if not desc then
        error("Expected descriptor to exist")
      end
      if desc.uuid ~= "ff01" then
        error("Expected custom UUID (0xFF01), got: " .. desc.uuid)
      end
      if desc.value ~= "DEADBEEF" then
        error("Expected value DEADBEEF, got: " .. (desc.value or "nil"))
      end
      if desc.parsed_value ~= "DEADBEEF" then
        error("Expected parsed_value=DEADBEEF (raw bytes), got: " .. (desc.parsed_value or "nil"))
      end
      print("Unknown descriptor test passed")
    peripheral:
      - service: "1234"
        characteristics:
          - uuid: "5678"
            descriptors:
              - uuid: "ff01"
                value: [0xDE, 0xAD, 0xBE, 0xEF]  # Custom data
    expected_stdout: |
      Unknown descriptor test passed

  - name: "Multiple Descriptors: CCCD + User Description + Extended Properties"
    # GOAL: Verify multiple descriptors are all correctly exposed with values
    #
    # TEST SCENARIO: Characteristic with CCCD + User Description + Extended Properties → verify all three
    script: |
      local char = blim.characteristic("180d", "2a37")
      if #char.descriptors ~= 3 then
        error("Expected 3 descriptors, got: " .. #char.descriptors)
      end
      -- Descriptors are sorted alphabetically by UUID: 2900, 2901, 2902
      -- Check Extended Properties (first after sorting)
      local ext = char.descriptors[1]
      if ext.uuid ~= "2900" then
        error("Extended Properties UUID mismatch: expected 2900, got: " .. (ext.uuid or "nil"))
      end
      if ext.parsed_value.reliable_write ~= false then
        error("Extended Properties validation failed")
      end
      -- Check User Description (second after sorting)
      local desc = char.descriptors[2]
      if desc.uuid ~= "2901" then
        error("User Description UUID mismatch: expected 2901, got: " .. (desc.uuid or "nil"))
      end
      if desc.parsed_value ~= "Heart Rate" then
        error("User Description validation failed, got: " .. (desc.parsed_value or "nil"))
      end
      -- Check CCCD (third after sorting)
      local cccd = char.descriptors[3]
      if cccd.uuid ~= "2902" then
        error("CCCD UUID mismatch: expected 2902, got: " .. (cccd.uuid or "nil"))
      end
      if type(cccd.parsed_value) ~= "table" then
        error("CCCD parsed_value is not a table, type: " .. type(cccd.parsed_value))
      end
      if cccd.parsed_value.error then
        error("CCCD parsed_value has error: " .. cccd.parsed_value.error)
      end
      if cccd.parsed_value.notifications ~= true then
        error("CCCD notifications not true, got: " .. tostring(cccd.parsed_value.notifications))
      end
      print("Multiple descriptors test passed")
    peripheral:
      - service: "180d"
        characteristics:
          - uuid: "2a37"
            descriptors:
              - uuid: "2902"
                value: [0x01, 0x00]  # Notifications enabled
              - uuid: "2901"
                value: [0x48, 0x65, 0x61, 0x72, 0x74, 0x20, 0x52, 0x61, 0x74, 0x65]  # "Heart Rate"
              - uuid: "2900"
                value: [0x00, 0x00]  # No extended properties
    expected_stdout: |
      Multiple descriptors test passed

  - name: "Empty Descriptors: Characteristic Without Descriptors"
    # GOAL: Verify characteristics without descriptors return empty array
    #
    # TEST SCENARIO: Characteristic with no descriptors → verify descriptors array is empty
    script: |
      local char = blim.characteristic("180f", "2a19")
      if #char.descriptors ~= 0 then
        error("Expected 0 descriptors, got: " .. #char.descriptors)
      end
      print("Empty descriptors test passed")
    peripheral:
      - service: "180f"
        characteristics:
          - uuid: "2a19"
            descriptors: []  # No descriptors
    expected_stdout: |
      Empty descriptors test passed

  - name: "Error: Parse Error in CCCD (Invalid Length)"
    # GOAL: Verify that parse errors are correctly represented in parsed_value
    #
    # TEST SCENARIO: CCCD with invalid length (1 byte instead of 2) → verify parsed_value contains error
    script: |
      local char = blim.characteristic("180d", "2a37")
      local desc = char.descriptors[1]
      if not desc then
        error("Expected descriptor to exist")
      end
      if desc.uuid ~= "2902" then
        error("Expected CCCD (0x2902)")
      end
      if desc.value ~= "01" then
        error("Expected value 01, got: " .. (desc.value or "nil"))
      end
      if not desc.parsed_value then
        error("Expected parsed_value to exist")
      end
      if not desc.parsed_value.error then
        error("Expected parsed_value.error field for parse error")
      end
      if not string.find(desc.parsed_value.error, "invalid length") then
        error("Expected 'invalid length' in error message, got: " .. desc.parsed_value.error)
      end
      print("CCCD parse error test passed")
    peripheral:
      - service: "180d"
        characteristics:
          - uuid: "2a37"
            descriptors:
              - uuid: "2902"
                value: [0x01]  # Invalid: only 1 byte (should be 2)
                parse_error: "invalid length for client config: expected 2, got 1"
    expected_stdout: |
      CCCD parse error test passed

  - name: "Error: Parse Error in Extended Properties (Invalid Length)"
    # GOAL: Verify parse errors are correctly handled for Extended Properties
    #
    # TEST SCENARIO: Extended Properties with wrong length → verify error in parsed_value
    script: |
      local char = blim.characteristic("1234", "5678")
      local desc = char.descriptors[1]
      if not desc then
        error("Expected descriptor to exist")
      end
      if desc.uuid ~= "2900" then
        error("Expected Extended Properties (0x2900)")
      end
      if not desc.parsed_value then
        error("Expected parsed_value to exist")
      end
      if not desc.parsed_value.error then
        error("Expected parsed_value.error field")
      end
      if not string.find(desc.parsed_value.error, "invalid length") then
        error("Expected 'invalid length' in error, got: " .. desc.parsed_value.error)
      end
      print("Extended Properties parse error test passed")
    peripheral:
      - service: "1234"
        characteristics:
          - uuid: "5678"
            descriptors:
              - uuid: "2900"
                value: [0x03]  # Invalid: only 1 byte (should be 2)
                parse_error: "invalid length for extended properties: expected 2, got 1"
    expected_stdout: |
      Extended Properties parse error test passed

  - name: "Error: Parse Error in Presentation Format (Invalid Length)"
    # GOAL: Verify parse errors for Presentation Format descriptor
    #
    # TEST SCENARIO: Presentation Format with wrong length → verify error in parsed_value
    script: |
      local char = blim.characteristic("180f", "2a19")
      local desc = char.descriptors[1]
      if not desc then
        error("Expected descriptor to exist")
      end
      if desc.uuid ~= "2904" then
        error("Expected Presentation Format (0x2904)")
      end
      if not desc.parsed_value then
        error("Expected parsed_value to exist")
      end
      if not desc.parsed_value.error then
        error("Expected parsed_value.error field")
      end
      if not string.find(desc.parsed_value.error, "invalid length") then
        error("Expected 'invalid length' in error, got: " .. desc.parsed_value.error)
      end
      print("Presentation Format parse error test passed")
    peripheral:
      - service: "180f"
        characteristics:
          - uuid: "2a19"
            descriptors:
              - uuid: "2904"
                value: [0x04, 0x00, 0x01]  # Invalid: only 3 bytes (should be 7)
                parse_error: "invalid length for presentation format: expected 7, got 3"
    expected_stdout: |
      Presentation Format parse error test passed

  - name: "Error: Descriptor Read Timeout"
    # GOAL: Verify that descriptor read timeouts are correctly represented
    #
    # TEST SCENARIO: Descriptor that times out during read → verify no value, parsed_value contains error
    script: |
      local char = blim.characteristic("1234", "5678")
      local desc = char.descriptors[1]
      if not desc then
        error("Expected descriptor to exist")
      end
      if desc.uuid ~= "2902" then
        error("Expected CCCD (0x2902)")
      end
      if desc.value then
        error("Expected no value field for timeout, got: " .. desc.value)
      end
      if not desc.parsed_value then
        error("Expected parsed_value to exist")
      end
      if not desc.parsed_value.error then
        error("Expected parsed_value.error field for timeout")
      end
      if not string.find(desc.parsed_value.error, "timeout") then
        error("Expected 'timeout' in error message, got: " .. desc.parsed_value.error)
      end
      print("Descriptor read timeout test passed")
    peripheral:
      - service: "1234"
        characteristics:
          - uuid: "5678"
            descriptors:
              - uuid: "2902"
                read_error: "timeout"
    expected_stdout: |
      Descriptor read timeout test passed

  - name: "Error: Descriptor Read Failure"
    # GOAL: Verify that descriptor read errors are correctly represented
    #
    # TEST SCENARIO: Descriptor that fails to read → verify no value, parsed_value contains error
    script: |
      local char = blim.characteristic("180d", "2a37")
      local desc = char.descriptors[1]
      if not desc then
        error("Expected descriptor to exist")
      end
      if desc.uuid ~= "2901" then
        error("Expected User Description (0x2901)")
      end
      if desc.value then
        error("Expected no value field for read error, got: " .. desc.value)
      end
      if not desc.parsed_value then
        error("Expected parsed_value to exist")
      end
      if not desc.parsed_value.error then
        error("Expected parsed_value.error field")
      end
      if not string.find(desc.parsed_value.error, "read_error") then
        error("Expected 'read_error' in error message, got: " .. desc.parsed_value.error)
      end
      print("Descriptor read error test passed")
    peripheral:
      - service: "180d"
        characteristics:
          - uuid: "2a37"
            descriptors:
              - uuid: "2901"
                read_error: "permission denied"
    expected_stdout: |
      Descriptor read error test passed

  - name: "Error: Invalid UTF-8 in User Description"
    # GOAL: Verify that invalid UTF-8 in User Description produces parse error
    #
    # TEST SCENARIO: User Description with invalid UTF-8 bytes → verify error in parsed_value
    script: |
      local char = blim.characteristic("1234", "5678")
      local desc = char.descriptors[1]
      if not desc then
        error("Expected descriptor to exist")
      end
      if desc.uuid ~= "2901" then
        error("Expected User Description (0x2901)")
      end
      if not desc.parsed_value then
        error("Expected parsed_value to exist")
      end
      if not desc.parsed_value.error then
        error("Expected parsed_value.error field for invalid UTF-8")
      end
      if not string.find(desc.parsed_value.error, "invalid UTF-8", 1, true) then
        error("Expected 'invalid UTF-8' in error, got: " .. desc.parsed_value.error)
      end
      print("Invalid UTF-8 test passed")
    peripheral:
      - service: "1234"
        characteristics:
          - uuid: "5678"
            descriptors:
              - uuid: "2901"
                value: [0xFF, 0xFE, 0xFD]  # Invalid UTF-8 sequence
                parse_error: "invalid UTF-8 in user description"
    expected_stdout: |
      Invalid UTF-8 test passed
