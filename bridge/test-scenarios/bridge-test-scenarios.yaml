test_cases:
  - name: "Bridge Error Handling: Lua Callback Runtime Error"
    # GOAL: Verify that Bridge2 properly captures Lua stderr errors via custom ErrorHandler
    #
    # TEST SCENARIO: Lua callback throws error → captured by customErrorHandler → appears in capturedErrors
    subscription:
      mode: "EveryUpdate"
      max_rate: 0ms
      services:
        - service: "1234"
          characteristics: ["5678"]
      callback_script: |
        error("Intentional bridge test error in Lua callback")
    steps:
      - services:
          - service: "1234"
            values:
              - char: "5678"
                value: [0x01, 0x02]
    expected_errors:
      - "Intentional bridge test error in Lua callback"
#    wait_after: 200ms

  - name: "Bridge Error Handling: Undefined Function Call"
    # GOAL: Verify that calling undefined functions produces a proper error, not SIGSEGV
    #
    # TEST SCENARIO: Lua callback calls undefined function → error logged after each step
    # This test validates per-step error handling without requiring all steps to complete
    subscription:
      mode: "EveryUpdate"
      max_rate: 0ms
      services:
        - service: "1234"
          characteristics: ["5678"]
      callback_script: |
        undefined_function(record)
    steps:
      - services:
          - service: "1234"
            values:
              - char: "5678"
                value: [0x01, 0x02]
        expected_errors:
          - "attempt to call global 'undefined_function'"
      - services:
          - service: "1234"
            values:
              - char: "5678"
                value: [0x03, 0x04]
        expected_errors:
          - "attempt to call global 'undefined_function'"
      - services:
          - service: "1234"
            values:
              - char: "5678"
                value: [0x03, 0x04]
        expected_errors:
          - "attempt to call global 'undefined_function'"
    skip: "golua stack corruption: Lua errors leave the stack in corrupted state, causing cascading failures in subsequent callback invocations. Requires fix in error recovery mechanism (lua_api.go callback panic handler) to properly reset Lua stack state after errors."

  - name: "Bridge Output Handling: Lua Print to PTY"
    # GOAL: Verify that Bridge2 writes Lua stdout to PTY for external software
    #
    # TEST SCENARIO: Lua prints to stdout → captured by output collector → written to PTY slave
    subscription:
      mode: "EveryUpdate"
      max_rate: 0ms
      services:
        - service: "180f"
          characteristics: ["2a19"]
      callback_script: |
        print("Battery notification received")
    steps:
      - services:
          - service: "180f"
            values:
              - char: "2a19"
                value: [0x42]
    expected_stdout: "Battery notification received\n"
#    wait_after: 200ms

  - name: "Bridge Mixed Output: Stdout and Stderr"
    # GOAL: Verify that Bridge2 correctly separates stdout (to PTY) and stderr (to error handler)
    #
    # TEST SCENARIO: Lua script outputs both stdout and stderr → properly routed to respective handlers
    subscription:
      mode: "EveryUpdate"
      max_rate: 0ms
      services:
        - service: "1234"
          characteristics: ["5678"]
      callback_script: |
        print("Callback executed")
        io.stderr:write("Error from callback\n")
    steps:
      - services:
          - service: "1234"
            values:
              - char: "5678"
                value: [0xAA, 0xBB]
    expected_stdout: "Callback executed\n"
    expected_errors:
      - "Error from callback"
#    wait_after: 200ms

  - name: "Bridge BLE Notify Integration"
    # GOAL: Verify complete BLE notify → Lua callback path with multiple services and characteristics
    #
    # TEST SCENARIO: Multiple BLE notifications (text and binary) → JSON callbacks → verify callback structure and data
    # Tests Nordic UART service (2 characteristics) and Battery service (1 characteristic)
    subscription:
      mode: "EveryUpdate"
      max_rate: 0ms
      services:
        - service: "6e400001-b5a3-f393-e0a9-e50e24dcca9e"
          characteristics: ["6e400003-b5a3-f393-e0a9-e50e24dcca9e", "6e400002-b5a3-f393-e0a9-e50e24dcca9e"]
        - service: "180f"
          characteristics: ["2a19"]
    steps:
      - services:
          - service: "6e400001-b5a3-f393-e0a9-e50e24dcca9e"
            values:
              - char: "6e400003-b5a3-f393-e0a9-e50e24dcca9e"
                value: [0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x21]  # "Hello World!"
              - char: "6e400002-b5a3-f393-e0a9-e50e24dcca9e"
                value: [0x42, 0x3A, 0x7D, 0x8E]
          - service: "180f"
            values:
              - char: "2a19"
                value: [42]
    expected_json_output:
      - record:
          Values:
            "6e400003b5a3f393e0a9e50e24dcca9e": [0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x21]  # "Hello World!"
      - record:
          Values:
            "6e400002b5a3f393e0a9e50e24dcca9e": [0x42, 0x3A, 0x7D, 0xEF, 0xBF, 0xBD]  # 0x8E becomes UTF-8 replacement char
      - record:
          Values:
            "2a19": [42]
#    wait_after: 100ms

  - name: "Bridge Default Script: Human-Readable PTY Output with Header"
    # GOAL: Verify that the default bridge script loads via file://, displays bridge status to stdout,
    #       and writes compact human-readable BLE notifications to PTY slave for external software
    #
    # TEST SCENARIO: Load bridge.lua from file:// → script subscribes to all notifiable characteristics →
    #                prints bridge header (device, PTY, services) to stdout → BLE notifications received →
    #                formatted output written to PTY slave → verify header content and PTY notification format
    #
    # NOTE: bridge.lua auto-discovers and subscribes to ALL notifiable characteristics
    # NOTE: Validates both stdout (header) and PTY slave read (notification output via pty_write)
    script: "file:///examples/bridge.lua"
    steps:
      - services:
          - service: "180f"
            values:
              - char: "2a19"
                value: [0x42]  # 'B'
      - services:
          - service: "180d"
            values:
              - char: "2a37"
                value: [0x48, 0x65, 0x6c, 0x6c, 0x6f]  # "Hello"
      - services:
          - service: "180f"
            values:
              - char: "2a19"
                value: [0xFF, 0xAA, 0xBB]  # Binary data (non-printable)
    expected_stdout: |-

      === BLE-PTY Bridge is Active ===
      Device: {{.DeviceAddress}}
      TTY: {{.TTY}}

      Service: 1234
      Characteristics: 1
        - 5678

      Service: 180d
      Characteristics: 2
        - 2a37
        - 2a38

      Service: 180f
      Characteristics: 1
        - 2a19

      Service: 6e400001b5a3f393e0a9e50e24dcca9e
      Characteristics: 2
        - 6e400002b5a3f393e0a9e50e24dcca9e
        - 6e400003b5a3f393e0a9e50e24dcca9e

      Bridge is running. Press Ctrl+C to stop the bridge.
    expected_pty_slave_read: |+
      [0] 2a19: 42 | B (1b)
      [0] 2a37: 48 65 6C 6C 6F | Hello (5b)
      [0] 2a19: FF AA BB | ... (3b)
